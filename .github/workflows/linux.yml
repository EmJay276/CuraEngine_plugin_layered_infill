name: Linux Installer
run-name: ${{ inputs.PLUGIN_GIT_VERSION }} for Linux-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      plugin_git_version:
        description: 'Plugin git Version'
        default: ''
        required: true
        type: string
      conan_args:
        description: 'Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string
      architecture:
        description: 'Architecture'
        required: true
        default: 'X64'
        type: choice
        options:
          - X64
      operating_system:
        description: 'OS'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-20.04
  workflow_call:
    inputs:
      plugin_git_version:
        description: 'Plugin git Version'
        default: ''
        required: true
        type: string
      conan_args:
        description: 'Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string
      architecture:
        description: 'Architecture'
        required: true
        default: 'X64'
        type: string
      operating_system:
        description: 'OS'
        required: true
        default: 'ubuntu-22.04'
        type: string

env:
  PLUGIN_GIT_VERSION: ${{ inputs.plugin_git_version }}

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.plugin_git_version }}

      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.x'
          cache: 'pip'
          cache-dependency-path: .github/workflows/requirements-conan-package.txt

      - name: Install Python requirements for runner
        run: pip install -r .github/workflows/requirements-conan-package.txt

      - name: Cache Conan local repository packages (Bash)
        uses: actions/cache@v3
        with:
          path: |
            $HOME/.conan/data
            $HOME/.conan/conan_download_cache
          key: conan-${{ runner.os }}-${{ runner.arch }}-installer-cache

      - name: Hack needed specifically for ubuntu-22.04 from mid-Feb 2023 onwards
        if: ${{ startsWith(inputs.operating_system, 'ubuntu-22.04') }}
        run: sudo apt remove libodbc2 libodbcinst2 unixodbc-common -y

      # NOTE: Due to what are probably github issues, we have to remove the cache and reconfigure before the rest.
      #       This is maybe because grub caches the disk it uses last time, which is recreated each time.
      - name: Install Linux system requirements
        run: |
          sudo rm /var/cache/debconf/config.dat
          sudo dpkg --configure -a
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update
          sudo apt upgrade
          sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config -y

      - name: Install GCC-12 on ubuntu-22.04
        if: ${{ startsWith(inputs.operating_system, 'ubuntu-22.04') }}
        run: |
          sudo apt install g++-12 gcc-12 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/jellespijker/conan-config.git
          conan config install https://github.com/jellespijker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Create the default Conan profile
        run: conan profile new default --detect --force

      - name: Use Conan download cache (Bash)
        run: conan config set storage.download_cache="$HOME/.conan/conan_download_cache"

      - name: Create the Packages (Powershell)
        run: |
          conan install . curaengine_plugin_infill_generate/${{ inputs.plugin_git_version }}@jellespijker/testing ${{ inputs.conan_args }} --build=missing --update -s curaengine_plugin_infill_generate:compiler.cppstd=20
          cmake --preset release
          cmake --build --preset release

      - name: Upload the binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ runner.arch }}
          path: |
            build/Release/curaengine_plugin_infill_generate
          retention-days: 5

      - name: Upload the cura plugin
        uses: actions/upload-artifact@v3
        with:
          name: linux-cura-plugin
          path: |
            CuraEngineInfillGenerate/**/*
          retention-days: 5

      - name: Write the run info
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "PLUGIN_GIT_VERSION={os.environ["PLUGIN_GIT_VERSION"]}" >> $GITHUB_ENV\n')

      - name: Upload the run info
        uses: actions/upload-artifact@v3
        with:
          name: linux-run-info
          path: |
            run_info.sh
          retention-days: 5
